#include<iostream>
#include<stdio.h>
#include<cmath>

#include<dp.hh>

using namespace std;


void PrintScientific1D(double d)
{
  if (d == 0)
  {
    printf ("%*d", 6, 0);
    return;
  }

  int exponent  = (int)floor(log10( fabs(d)));  // This will round down the exponent
  double base   = d * pow(10, -1.0*exponent);

  printf("%1.1lfe%+01d", base, exponent);
}

void PrintScientific2D(double d)
{
  if (d == 0)
  {
    printf ("%*d", 7, 0);
    return;
  }

  int exponent  = (int)floor(log10( fabs(d)));  // This will round down the exponent
  double base   = d * pow(10, -1.0*exponent);

  printf("%1.1lfe%+02d", base, exponent);
}


int main(int argc, char const *argv[]) {
  std::vector<int> nSamples, nRefs, nReps;

  //nSamples = {4, 8, 16, 90, 180, 360};
  nSamples = {4, 16, 90, 360};
  nRefs = {1, 2, 4, 8, 16};
  // nReps = {100, 100, 10, 100, 10, 10}; // number of repetitions for each experiment
  nReps = {1, 1, 1, 1, 1, 1}; // number of repetitions for each experiment

  std::vector<std::vector<double>> vx, vy;
  std::vector<double> vtheta0, vtheta1, vkappa;
  std::vector<double> Lopt;

  // kaya ex 1
  vx.push_back({ 0., -0.1, 0.2, 1. });
  vy.push_back({ 0., 0.3, 0.8, 1. });
  vtheta0.push_back(-M_PI / 3);
  vtheta1.push_back(-M_PI / 6);
  vkappa.push_back(3);
  Lopt.push_back(3.41557885807514871601142658619);

  // kaya 2
  vx.push_back({ 0, -0.1, 0.2, 1, 0.5, 0.5 });
  vy.push_back({ 0, 0.3, 0.8, 1, 0.5, 0 });
  vtheta0.push_back(-M_PI / 3);
  vtheta1.push_back(-M_PI / 6);
  vkappa.push_back(3);
  Lopt.push_back(6.27803455030931356617429628386);

  //kaya 3
  vx.push_back({ 0.5, 0, 0, 0.1, 0.4, 0.5, 0.6, 1, 1, 1.4, 1.2, 1.5, 2, 1.5, 1.5, 1.7, 1.9, 2, 1.9, 2.5 });
  vy.push_back({ 1.2, 0.8, 0.4, 0, 0.2, 0.5, 1, 0.8, 0, 0.2, 1, 1.2, 1.5, 0.8, 0, 0.6, 1, 0.5, 0, 0.6 });
  vtheta0.push_back(5*M_PI / 6);
  vtheta1.push_back(0);
  vkappa.push_back(5);
  Lopt.push_back(11.9162126542854860389297755319);

  //kaya 4
  vx.push_back({ 0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2, 1.5, 1, 0.5, 0., 0. });
  vy.push_back({ 1.2, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0.0, 0, 0.0, 0., -0.5 });
  vtheta0.push_back(5*M_PI / 6);
  vtheta1.push_back(0);
  vkappa.push_back(3);
  Lopt.push_back(7.46756219733842652175326293218);

  // omega
  vx.push_back({ 2.9265642, 2.6734362, 2.5109322, 1.9078122, 1.1859282, 1.9249962, 
    2.8265562, 0.00468420000000025, -2.826567, -1.9437558, -1.1859438, 
    - 1.9062558, -2.501565, -2.6734386, -2.9265642, -2.6187522, -1.1406318, 
    - 0.8968758, -1.4562558, -1.9062558, -0.00468780000000013, 1.9078122, 
    1.4468682, 0.8968722, 1.1406282, 2.6187522, 2.9265642 });
  vy.push_back({ -1.707808758, -1.707808758, -2.367185958, -2.582810358, -2.582810358, 
    - 1.167184758, 0.915619242, 3.178123242, 0.915619242, -1.150000758, 
    - 2.582810358, -2.582810358, -2.393750358, -1.707808758, -1.707808758, 
    - 3.178123242, -3.178123242, -2.989063158, -0.915616758, 0.925003242, 
    2.953123242, 0.925003242, -0.915616758, -2.989063158, -3.178123242, -3.178123242, -1.707808758 });
  vtheta0.push_back(M_PI*0.9);
  vtheta1.push_back(M_PI*0.9);
  vkappa.push_back(3);
  Lopt.push_back(41.0725016438839318766440555919);
  
  // Spa
  vx.push_back({ 0, -7.07639, -14.1651, -21.2687, -28.3898, -35.5307, -42.694, -49.8821, -57.0975, -64.3426, -71.6197, -78.9311, -86.2791, -93.666, -101.094, -108.565, -116.081, -123.645, -131.258, -138.922, -146.639, -154.411, -162.239, -170.126, -178.072, -186.078, -194.147, -202.373, -211.512, -214.959, -213.393, -210.816, -208.308, -205.86, -203.459, -201.095, -198.757, -196.435, -194.117, -191.793, -189.451, -187.081, -184.672, -182.213, -179.693, -177.102, -174.429, -171.663, -168.794, -165.812, -162.706, -159.466, -156.082, -152.545, -148.845, -144.972, -140.919, -136.676, -132.236, -127.59, -122.73, -117.652, -112.347, -106.811, -101.038, -95.0244, -88.8133, -82.611, -76.4409, -70.3013, -64.1904, -58.1063, -52.0474, -46.0117, -39.9975, -34.0029, -28.026, -22.065, -16.118, -10.1832, -4.25852, 1.65776, 7.56759, 13.4729, 19.3755, 25.2774, 31.1804, 37.1943, 43.4664, 49.8424, 56.1628, 62.2657, 67.9787, 73.1133, 77.4608, 80.9118, 84.1574, 87.4486, 90.9023, 94.6327, 98.7501, 103.358, 108.548, 114.399, 120.967, 128.237, 136.068, 144.336, 152.937, 161.783, 170.802, 179.934, 189.126, 198.33, 207.501, 216.588, 225.527, 234.055, 242.08, 249.646, 256.829, 263.725, 270.447, 277.114, 283.85, 290.775, 297.993, 305.279, 312.474, 319.589, 326.634, 333.62, 340.559, 347.463, 354.343, 361.211, 368.08, 374.962, 381.868, 388.81, 395.8, 402.849, 409.97, 417.171, 424.464, 431.859, 439.364, 446.99, 454.742, 462.629, 470.657, 478.862, 487.298, 495.913, 504.657, 513.484, 522.355, 531.23, 540.07, 548.835, 557.532, 566.231, 574.932, 583.636, 592.344, 601.054, 609.766, 618.482, 627.2, 635.92, 644.643, 653.369, 662.096, 670.826, 679.558, 688.293, 697.029, 705.767, 714.508, 723.25, 731.994, 740.74, 749.487, 758.236, 766.987, 775.739, 784.492, 793.247, 802.003, 810.76, 819.519, 828.278, 837.039, 845.8, 854.563, 863.326, 872.09, 880.855, 889.62, 898.386, 907.152, 915.919, 924.687, 933.454, 942.222, 950.99, 959.758, 968.527, 977.295, 986.063, 994.831, 1003.6, 1012.37, 1021.13, 1029.9, 1038.67, 1047.43, 1056.2, 1064.96, 1073.73, 1082.49, 1091.25, 1100.02, 1108.78, 1117.54, 1126.29, 1135.05, 1143.81, 1152.82, 1162.41, 1172.35, 1182.3, 1191.94, 1200.88, 1208.77, 1215.24, 1221.74, 1229.82, 1238.98, 1248.75, 1258.74, 1268.63, 1278.21, 1287.33, 1296.03, 1304.44, 1312.69, 1320.93, 1329.3, 1337.94, 1346.95, 1356.37, 1366.14, 1376.12, 1386.09, 1395.91, 1405.48, 1414.73, 1423.63, 1432.14, 1440.27, 1448.04, 1455.49, 1462.65, 1469.58, 1476.34, 1482.99, 1489.59, 1496.23, 1502.95, 1509.84, 1516.94, 1524.27, 1531.7, 1539.22, 1546.79, 1554.38, 1561.99, 1569.59, 1577.16, 1584.67, 1592.11, 1599.45, 1606.66, 1613.73, 1620.62, 1627.31, 1633.76, 1639.95, 1645.26, 1648.61, 1649.86, 1648.97, 1646.02, 1641.17, 1634.64, 1626.73, 1617.77, 1608.11, 1598.14, 1588.31, 1578.98, 1570.36, 1562.57, 1555.58, 1548.81, 1542.02, 1535.18, 1528.29, 1521.32, 1514.26, 1507.08, 1499.77, 1492.31, 1484.69, 1476.9, 1468.92, 1460.72, 1451.58, 1441.75, 1431.79, 1422.2, 1413.38, 1404.98, 1396.58, 1388.17, 1379.74, 1371.29, 1362.82, 1354.32, 1345.8, 1337.24, 1328.66, 1320.03, 1311.37, 1302.67, 1293.92, 1285.12, 1276.28, 1267.39, 1258.45, 1249.45, 1240.4, 1231.3, 1222.14, 1212.94, 1203.74, 1194.53, 1185.31, 1176.09, 1166.87, 1157.64, 1148.42, 1139.2, 1129.98, 1120.77, 1111.57, 1102.38, 1093.19, 1084.02, 1074.87, 1065.73, 1056.6, 1047.5, 1038.42, 1029.36, 1020.33, 1011.32, 1002.41, 994.132, 986.684, 980.145, 974.557, 969.929, 966.243, 963.464, 961.537, 960.399, 959.977, 960.192, 960.965, 962.214, 963.841, 965.801, 968.119, 970.822, 973.936, 977.484, 981.486, 985.961, 990.923, 996.382, 1002.35, 1008.82, 1015.79, 1023.24, 1031.17, 1039.55, 1048.33, 1057.48, 1066.94, 1076.61, 1086.33, 1096.07, 1105.84, 1115.64, 1125.46, 1135.29, 1145.14, 1155, 1164.88, 1174.76, 1184.66, 1194.56, 1204.46, 1214.37, 1224.28, 1234.19, 1244.11, 1254.02, 1263.93, 1273.83, 1283.74, 1293.63, 1303.52, 1313.4, 1323.27, 1333.13, 1342.98, 1352.86, 1362.76, 1372.65, 1382.5, 1392.29, 1401.94, 1411.39, 1420.53, 1429.2, 1437.23, 1444.4, 1450.45, 1455.2, 1458.67, 1460.88, 1461.85, 1461.63, 1460.3, 1457.95, 1454.66, 1451.06, 1448.49, 1447.05, 1446.84, 1447.89, 1450.24, 1453.88, 1458.81, 1464.95, 1472.21, 1480.4, 1488.95, 1497.72, 1506.67, 1515.77, 1525, 1534.33, 1543.74, 1553.21, 1562.74, 1572.29, 1581.87, 1591.45, 1601.03, 1610.6, 1620.14, 1629.64, 1639.08, 1648.45, 1657.73, 1666.89, 1675.83, 1684.13, 1691.53, 1697.74, 1702.45, 1705.34, 1706.16, 1704.69, 1700.93, 1696.77, 1693, 1689.54, 1686.27, 1683.1, 1679.94, 1676.68, 1673.21, 1669.45, 1665.3, 1660.68, 1655.5, 1649.7, 1643.23, 1636.07, 1628.33, 1620.07, 1611.32, 1602.14, 1592.61, 1582.81, 1572.85, 1562.86, 1552.91, 1542.96, 1533.01, 1523.06, 1513.12, 1503.2, 1493.3, 1483.44, 1473.63, 1463.88, 1454.22, 1444.67, 1435.22, 1425.85, 1416.57, 1407.38, 1398.27, 1389.25, 1380.31, 1371.45, 1362.66, 1353.95, 1345.31, 1336.73, 1328.22, 1319.76, 1311.35, 1302.98, 1294.65, 1286.35, 1278.1, 1270.03, 1262.14, 1254.44, 1246.91, 1239.54, 1232.34, 1225.28, 1218.36, 1211.57, 1204.89, 1198.31, 1191.81, 1185.39, 1179.03, 1172.72, 1166.43, 1160.15, 1153.88, 1147.59, 1141.26, 1134.9, 1128.47, 1121.97, 1115.38, 1108.68, 1101.87, 1094.92, 1087.8, 1080.49, 1073.01, 1065.35, 1057.52, 1049.51, 1041.32, 1032.97, 1024.44, 1015.76, 1006.92, 997.921, 988.782, 979.506, 970.102, 960.579, 950.949, 941.222, 931.413, 921.534, 911.607, 901.711, 891.869, 882.076, 872.325, 862.604, 852.899, 843.192, 833.47, 823.717, 813.922, 804.077, 794.179, 784.233, 774.25, 764.251, 754.269, 744.347, 734.546, 724.987, 715.729, 706.772, 698.079, 689.588, 681.219, 672.881, 664.545, 656.234, 647.946, 639.676, 631.422, 623.178, 614.943, 606.711, 598.479, 590.243, 582, 573.746, 565.477, 557.189, 548.879, 540.543, 532.177, 523.779, 515.318, 506.693, 497.912, 488.996, 479.963, 470.827, 461.605, 452.309, 442.951, 433.543, 424.093, 414.611, 405.106, 395.584, 386.054, 376.51, 366.951, 357.379, 347.799, 338.214, 328.628, 319.044, 309.465, 299.896, 290.339, 280.799, 271.28, 261.785, 252.1, 243.69, 240.594, 242.037, 242.163, 239.381, 232.966, 223.619, 213.891, 205.395, 198.164, 191.448, 184.44, 177.322, 170.15, 162.928, 155.662, 148.356, 141.016, 133.646, 126.251, 118.835, 111.404, 103.962, 96.5131, 89.0623, 81.6141, 74.173, 66.7437, 59.3306, 51.9384, 44.5718, 37.2357, 29.9346, 22.6737, 15.4577, 8.29183, 1.18121, 0});
  vy.push_back({ 0, -7.06574, -14.1191, -21.1575, -28.1782, -35.1787, -42.1563, -49.1083, -56.0321, -62.9247, -69.7836, -76.6059, -83.3886, -90.1291, -96.8243, -103.471, -110.067, -116.608, -123.092, -129.516, -135.876, -142.168, -148.391, -154.539, -160.611, -166.601, -172.508, -178.171, -175.887, -166.745, -156.906, -147.244, -137.564, -127.868, -118.161, -108.444, -98.7213, -88.9947, -79.267, -69.5409, -59.8189, -50.1038, -40.3983, -30.7054, -21.028, -11.3696, -1.73353, 7.87633, 17.4559, 27.0007, 36.506, 45.9664, 55.3764, 64.7298, 74.0199, 83.2396, 92.3812, 101.436, 110.396, 119.251, 127.991, 136.605, 145.081, 153.409, 161.574, 169.563, 177.4, 185.244, 193.114, 201.007, 208.923, 216.859, 224.815, 232.788, 240.777, 248.781, 256.798, 264.827, 272.867, 280.915, 288.971, 297.033, 305.1, 313.17, 321.242, 329.315, 337.387, 345.376, 353.164, 360.868, 368.617, 376.538, 384.743, 393.322, 402.322, 411.706, 421.164, 430.607, 439.992, 449.269, 458.381, 467.255, 475.8, 483.906, 491.441, 498.302, 504.517, 510.139, 515.238, 519.899, 524.216, 528.291, 532.23, 536.139, 540.127, 544.301, 548.78, 553.995, 559.957, 566.492, 573.449, 580.69, 588.094, 595.547, 602.937, 610.151, 617.071, 623.92, 630.865, 637.892, 644.989, 652.144, 659.344, 666.579, 673.836, 681.104, 688.371, 695.627, 702.86, 710.057, 717.208, 724.301, 731.323, 738.261, 745.102, 751.834, 758.442, 764.911, 771.228, 777.375, 783.337, 789.052, 794.421, 799.498, 804.35, 809.048, 813.665, 818.273, 822.948, 827.76, 832.696, 837.63, 842.558, 847.481, 852.398, 857.311, 862.219, 867.123, 872.021, 876.915, 881.805, 886.691, 891.572, 896.449, 901.322, 906.192, 911.058, 915.92, 920.779, 925.634, 930.486, 935.335, 940.181, 945.024, 949.864, 954.702, 959.537, 964.369, 969.2, 974.028, 978.854, 983.677, 988.5, 993.32, 998.139, 1002.96, 1007.77, 1012.59, 1017.4, 1022.21, 1027.02, 1031.83, 1036.64, 1041.45, 1046.26, 1051.07, 1055.88, 1060.69, 1065.49, 1070.3, 1075.11, 1079.92, 1084.73, 1089.54, 1094.35, 1099.16, 1103.97, 1108.79, 1113.6, 1118.42, 1123.23, 1128.05, 1132.87, 1137.69, 1142.52, 1147.34, 1152.17, 1157, 1161.32, 1164.08, 1165.12, 1164.34, 1161.72, 1157.29, 1151.17, 1143.56, 1135.99, 1130.15, 1126.18, 1124.12, 1123.88, 1125.28, 1128.13, 1132.21, 1137.13, 1142.54, 1148.19, 1153.86, 1159.33, 1164.36, 1168.68, 1172.03, 1174.11, 1174.65, 1173.91, 1172.05, 1169.17, 1165.39, 1160.82, 1155.58, 1149.77, 1143.48, 1136.8, 1129.82, 1122.61, 1115.24, 1107.77, 1100.27, 1092.78, 1085.38, 1078.13, 1071.09, 1064.29, 1057.6, 1051, 1044.47, 1037.97, 1031.48, 1024.98, 1018.44, 1011.84, 1005.15, 998.361, 991.437, 984.361, 977.115, 969.681, 962.044, 954.19, 945.737, 936.336, 926.433, 916.491, 906.955, 898.232, 890.68, 884.591, 880.188, 877.68, 877.38, 879.146, 882.709, 887.766, 894.018, 901.164, 908.523, 915.863, 923.165, 930.412, 937.583, 944.659, 951.619, 958.441, 965.103, 971.58, 977.848, 983.88, 989.589, 993.595, 995.265, 994.63, 991.853, 987.185, 981.749, 976.326, 970.923, 965.544, 960.194, 954.879, 949.604, 944.374, 939.194, 934.07, 929.008, 924.012, 919.089, 914.244, 909.482, 904.81, 900.233, 895.758, 891.39, 887.136, 883.001, 878.993, 875.063, 871.155, 867.262, 863.383, 859.512, 855.647, 851.784, 847.918, 844.046, 840.164, 836.269, 832.356, 828.422, 824.463, 820.476, 816.456, 812.401, 808.305, 804.166, 799.981, 795.744, 791.454, 787.106, 782.569, 776.978, 770.316, 762.758, 754.472, 745.613, 736.321, 726.719, 716.909, 706.977, 696.988, 686.991, 677.022, 667.102, 657.235, 647.43, 637.703, 628.076, 618.574, 609.225, 600.062, 591.121, 582.44, 574.064, 566.039, 558.416, 551.248, 544.59, 538.502, 533.04, 528.266, 524.238, 521.012, 518.467, 516.094, 513.849, 511.725, 509.713, 507.804, 505.992, 504.267, 502.621, 501.046, 499.533, 498.073, 496.658, 495.28, 493.93, 492.599, 491.28, 489.962, 488.638, 487.3, 485.938, 484.544, 483.109, 481.626, 480.085, 478.477, 476.796, 475.075, 473.548, 472.12, 470.633, 468.93, 466.856, 464.259, 460.996, 456.936, 451.972, 446.025, 439.062, 431.112, 422.322, 412.954, 403.208, 393.261, 383.269, 373.363, 363.649, 354.21, 344.882, 335.225, 325.334, 315.343, 305.405, 295.692, 286.391, 277.698, 269.818, 262.956, 257.224, 252.037, 247.227, 242.768, 238.629, 234.778, 231.181, 227.802, 224.604, 221.551, 218.603, 215.722, 212.87, 210.007, 207.095, 204.095, 200.968, 197.677, 194.184, 190.454, 186.451, 181.976, 176.419, 169.707, 161.883, 153.076, 143.523, 133.576, 123.708, 114.463, 105.37, 96.1071, 86.728, 77.2769, 67.791, 58.3049, 48.8526, 39.4717, 30.2059, 21.1083, 12.244, 3.69269, -4.44973, -12.0698, -19.0492, -25.3806, -31.0056, -35.8393, -39.7966, -42.795, -44.7569, -45.613, -45.3054, -44.2946, -43.316, -42.3341, -41.305, -40.1848, -38.9294, -37.4954, -35.8396, -33.9193, -31.6927, -29.1193, -26.1605, -22.8872, -19.3807, -15.6541, -11.7206, -7.59312, -3.2843, 1.19339, 5.82773, 10.6067, 15.5187, 20.5521, 25.6956, 30.9382, 36.2691, 41.6775, 47.153, 52.6852, 58.2639, 63.9202, 69.8219, 75.9698, 82.3431, 88.9218, 95.6871, 102.621, 109.705, 116.924, 124.261, 131.703, 139.233, 146.838, 154.505, 162.22, 169.972, 177.748, 185.535, 193.321, 201.094, 208.842, 216.553, 224.213, 231.81, 239.331, 246.76, 254.085, 261.274, 268.288, 275.118, 281.753, 288.182, 294.395, 300.379, 306.124, 311.617, 316.848, 321.804, 326.473, 330.842, 334.9, 338.634, 342.033, 345.084, 347.776, 350.096, 352.035, 353.58, 354.784, 356.225, 357.991, 360.016, 362.233, 364.578, 366.986, 369.392, 371.733, 373.942, 375.955, 377.707, 379.129, 380.155, 380.716, 380.746, 380.178, 378.948, 376.978, 374.056, 370.283, 365.84, 360.899, 355.617, 350.144, 344.623, 339.1, 333.539, 327.944, 322.321, 316.676, 311.015, 305.343, 299.665, 293.987, 288.315, 282.654, 277.009, 271.386, 265.79, 260.228, 254.704, 249.225, 243.796, 238.466, 233.407, 228.622, 224.095, 219.807, 215.74, 211.874, 208.188, 204.662, 201.275, 198.004, 194.826, 191.721, 188.664, 185.635, 182.649, 179.714, 176.818, 173.95, 171.099, 168.252, 165.398, 162.526, 159.623, 156.679, 153.681, 150.618, 147.479, 145.498, 150.433, 159.75, 169.633, 179.609, 189.159, 196.703, 199.804, 197.83, 192.617, 185.722, 178.314, 171.18, 164.156, 157.188, 150.271, 143.401, 136.573, 129.782, 123.023, 116.291, 109.582, 102.891, 96.2113, 89.5393, 82.8695, 76.1968, 69.5162, 62.8226, 56.111, 49.3763, 42.6137, 35.8181, 28.9847, 22.1088, 15.1857, 8.21076, 1.1795, 0});
  vtheta0.push_back(3.9270);
  vtheta1.push_back(3.9270);
  vkappa.push_back(3);
  Lopt.push_back(6988.66098639942993031581863761);

  std::streamsize ss = std::cout.precision();
  for (int itest=0; itest<vx.size(); ++itest) 
  {
    std::vector<Configuration2> points;
    std::vector<bool> fixedAngles;
    for (int i=0; i<vx[itest].size(); ++i){
      if (i==0){
        fixedAngles.push_back(true);
        points.push_back(Configuration2(vx[itest][i], vy[itest][i], vtheta0[itest]));
      }
      else if(i==vx[itest].size()-1){
        fixedAngles.push_back(true);
        points.push_back(Configuration2(vx[itest][i], vy[itest][i], vtheta1[itest]));
      }
      else{
        fixedAngles.push_back(false);
        points.push_back(Configuration2(vx[itest][i], vy[itest][i], ANGLE::INVALID));
      }
    }

    // if (itest!=3){continue;}
    std::cout << "\n\n\n\n\n";
    for (int is=0; is<nSamples.size(); ++is)
    {
      // if (nSamples[is]!=4){continue;}
      for (int ir=0; ir<nRefs.size(); ++ir)
      {
        // if (nRefs[ir]!=4){continue;}
        std::vector<double> vtheta;
        double L;
        real_type param=vkappa[itest];
        for (int ik=0; ik<nReps[itest]; ++ik) 
        {
          vtheta = DP::solveDP(points, nSamples[is], fixedAngles, nRefs[ir], &param); 
        }
        L=vtheta[0];
        vtheta.erase(vtheta.begin());
        printf("%3d & %2d & ", nSamples[is], nRefs[ir]);
        PrintScientific2D((L-Lopt[itest])*1000.0);
        printf("\\\\\n");

      }   
    }
  }
	return 0;
}


