//File included in src/include/dp.hh

std::vector<Angle> DP::bestAngles(DP::Cell* matrix, int discr, int size){
  DP::Cell* best=&matrix[0];
  //Find best path
  for (int i=size; i<discr*size; i+=size){
    if (best->l()>matrix[i].l()){
      best=&matrix[i];
    }
  }
  //Retrieve best angles
  vector<Angle> ret(1, best->th());
  DP::Cell* next=best->next();
  while (next!=NULL){
    ret.push_back(next->th());
    next=next->next();
  }
  return ret;
}

template<class CURVE>
std::vector<Angle> DP::solveDP (std::vector<Configuration2<double> > points, int discr, const std::vector<bool> fixedAngles, real_type* params, bool guessInitialAnglesVal=false){
  uint size=points.size();
  if (points.size()!=fixedAngles.size()){
    cerr << "Number of points and number of fixed angles are not the same: " << points.size() << "!=" << fixedAngles.size() << endl;
    return std::vector<Angle>();
  }
  if (guessInitialAnglesVal){
    DP::guessInitialAngles(points, fixedAngles);
  }
  DP::Cell* matrix=new DP::Cell[discr*size];
  
  for (uint i=size-1; i>0; i--){
    Configuration2<double>c0=points[i-1];
    Configuration2<double>c1=points[i];
    Angle a00=c0.th(), a01=c1.th();
    for (int j=0; j<discr; j++){
      Angle bestA=0.0;
      LEN_T bestL=std::numeric_limits<LEN_T>::max(); 
      int bestK=0;
      //if (!fixedAngles[i-1]){ c0.th(m_2pi*(j*1.0)/(discr*1.0)); } //If angle is fixed I don't have to change it
      if (!fixedAngles[i-1]){ c0.th(a00+m_2pi*j/(discr*1.0)); } //If angle is fixed I don't have to change it
      for (int k=0; k<discr; k++){
        LEN_T currL=std::numeric_limits<LEN_T>::max();
        if (!fixedAngles[i]){ c1.th(a01+m_2pi*k/(discr*1.0)); } //If angle is fixed I don't have to change it
        //if (!fixedAngles[i]){ c1.th(m_2pi*(k*1.0)/(discr*1.0)); } //If angle is fixed I don't have to change it
        CURVE c;
        try{
          c=CURVE(c0, c1, params); 
        } catch (runtime_error* e){}
        Cell* next=(i==size-1 ? NULL : &matrix[k*size+(i+1)]);
        if (c.l()>0){
          currL=c.l();
          if (next!=NULL){
            currL+=next->l();
          }  
          if (currL<bestL || bestL==std::numeric_limits<LEN_T>::max()){
            bestL=currL;
            bestA=c1.th();
            bestK=k;
          }
        }
        if (fixedAngles[i]){ k=discr; } //If the angle is fixed I don't have to change it
      }
      if (bestL!=std::numeric_limits<LEN_T>::max()){
        Cell* next=(i==size-1? NULL : &matrix[bestK*size+(i+1)]);
        matrix[j*size+i]=Cell(bestA, bestL, next, i, j, j*size+i);
      }
      if (i==1){
        matrix[size*j]=Cell(c0.th(), bestL, &matrix[size*j+i], 0, j, size*j);
      }
      if (fixedAngles[i-1]){ j=discr; } //If the angle is fixed I don't have to change it
    }
  }
#ifdef DEBUG
  cout << "Printing " << endl;
  printVM(matrix, discr, size)
  //Retrieve angles
  cout << "Computing best angles" << endl;
#endif
  std::vector<Angle> bestA=DP::bestAngles(matrix, discr, size);
#ifdef DEBUG
  printV(bestA)
#endif
  
  double Length=0.0;
  for (unsigned int i=bestA.size()-1; i>0; i--){
    points[i].th(bestA[i]);
    points[i-1].th(bestA[i-1]);
    CURVE c(points[i-1], points[i], params);
    Length+=c.l();
  }
#ifdef DEBUG
  cout << "Length: " << setprecision(20) << Length << endl;

  cout << "Printing for Matlab" << endl;
  cout << "X=[";
  for (unsigned int i=0; i<points.size(); i++){ cout << points[i].x() << (i!=points.size()-1 ? ", " : "];\n"); }
  cout << "Y=[";
  for (unsigned int i=0; i<points.size(); i++){ cout << points[i].y() << (i!=points.size()-1 ? ", " : "];\n"); }
  cout << "th=[";
  for (unsigned int i=0; i<bestA.size(); i++){ cout << bestA[i] << (i!=bestA.size()-1 ? ", " : "];\n"); }
  cout << "KMAX: " << params[0] << endl;
#endif

  delete [] matrix;
  return bestA;
}


